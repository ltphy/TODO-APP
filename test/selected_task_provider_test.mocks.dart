// // Mocks generated by Mockito 5.0.15 from annotations
// // in todo/test/selected_task_provider_test.dart.
// // Do not manually edit this file.
//
// import 'dart:async' as _i5;
// import 'dart:ui' as _i6;
//
// import 'package:mockito/mockito.dart' as _i1;
// import 'package:todo/model/task/task.dart' as _i3;
// import 'package:todo/provider/task_list_provider.dart' as _i4;
// import 'package:todo/service/storage_database.dart' as _i2;
//
// // ignore_for_file: avoid_redundant_argument_values
// // ignore_for_file: avoid_setters_without_getters
// // ignore_for_file: comment_references
// // ignore_for_file: implementation_imports
// // ignore_for_file: invalid_use_of_visible_for_testing_member
// // ignore_for_file: prefer_const_constructors
// // ignore_for_file: unnecessary_parenthesis
//
// class _FakeStorageDatabase_0 extends _i1.Fake implements _i2.StorageDatabase {}
//
// class _FakeTask_1 extends _i1.Fake implements _i3.Task {}
//
// /// A class which mocks [TaskListProvider].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockTaskListProvider extends _i1.Mock implements _i4.TaskListProvider {
//   MockTaskListProvider() {
//     _i1.throwOnMissingStub(this);
//   }
//
//   @override
//   List<_i3.Task> get taskList => (super
//           .noSuchMethod(Invocation.getter(#taskList), returnValue: <_i3.Task>[])
//       as List<_i3.Task>);
//   @override
//   _i2.StorageDatabase get storageDatabase =>
//       (super.noSuchMethod(Invocation.getter(#storageDatabase),
//           returnValue: _FakeStorage
//           atabase_0()) as _i2.StorageDatabase);
//   @override
//   List<_i3.Task> get completeTasks =>
//       (super.noSuchMethod(Invocation.getter(#completeTasks),
//           returnValue: <_i3.Task>[]) as List<_i3.Task>);
//   @override
//   List<_i3.Task> get incompleteTasks =>
//       (super.noSuchMethod(Invocation.getter(#incompleteTasks),
//           returnValue: <_i3.Task>[]) as List<_i3.Task>);
//   @override
//   bool get hasListeners =>
//       (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
//           as bool);
//   @override
//   _i5.Future<void> saveTaskList() =>
//       (super.noSuchMethod(Invocation.method(#saveTaskList, []),
//           returnValue: Future<void>.value(),
//           returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
//   @override
//   _i5.Future<void> updateTask(_i3.Task? task) =>
//       (super.noSuchMethod(Invocation.method(#updateTask, [task]),
//           returnValue: Future<void>.value(),
//           returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
//   @override
//   _i5.Future<void> selectTask(_i3.Task? task) =>
//       (super.noSuchMethod(Invocation.method(#selectTask, [task]),
//           returnValue: Future<void>.value(),
//           returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
//   @override
//   _i5.Future<void> removeTask(_i3.Task? task) =>
//       (super.noSuchMethod(Invocation.method(#removeTask, [task]),
//           returnValue: Future<void>.value(),
//           returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
//   @override
//   _i3.Task getTaskById(String? taskId) =>
//       (super.noSuchMethod(Invocation.method(#getTaskById, [taskId]),
//           returnValue: _FakeTask_1()) as _i3.Task);
//   @override
//   void addListener(_i6.VoidCallback? listener) =>
//       super.noSuchMethod(Invocation.method(#addListener, [listener]),
//           returnValueForMissingStub: null);
//   @override
//   void removeListener(_i6.VoidCallback? listener) =>
//       super.noSuchMethod(Invocation.method(#removeListener, [listener]),
//           returnValueForMissingStub: null);
//   @override
//   void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
//       returnValueForMissingStub: null);
//   @override
//   void notifyListeners() =>
//       super.noSuchMethod(Invocation.method(#notifyListeners, []),
//           returnValueForMissingStub: null);
//   @override
//   String toString() => super.toString();
// }
